name: CONTINUOUS-INTEGRATION

on:

  # Called from solution repos
  workflow_call:
    inputs:
      feature:
        required: true
        type: string
      target-ref:
        required: true
        type: string
      solution:
        required: true
        type: string
      site-url:
        required: true
        type: string
      check-links:
        required: true
        type: string
      deploy-to:
        required: true
        type: string
      repo-stage:
        required: true
        type: string
      repo-gitops:
        required: true
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

jobs:

  # Dispatch event (ci-on-main) to GitOps repo
  dispatch-ci-on-main:
    name: 📨 CICD Event - Start
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      REPO: ${{ inputs.repo-gitops }}
    permissions:
      contents: none
    steps:
      - name: Dispatch
        uses: actions/github-scripts@v7
        with:
          github-token: ${{ secrets.cd_PAT }}
          script: |
            const { REPO } = process.env
            github.rest.repos.dispatches({
              owner: context.repo.owner,
              repo: ${REPO},
              event_type: 'cicd-event',
              client_payload: {"phase": "start", "outcome": "success"}
            });

  set-tag:
    name: 🔖 Set Tag
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: none
    outputs:
      tag: ${{ steps.setoutput.outputs.TAG }}
    steps:
      
    - name: Output Tag
      id: setoutput
      run: |
        build="BUILD-$(date '+%Y.%m.%d.%H.%M')" || 'ERROR'
        echo "$build"
        echo "TAG=$build" >> $GITHUB_OUTPUT          

  # Build for specific solution
  build:
    name: 🔨 Build
    needs: [set-tag]
    uses: ./.github/workflows/build.yml
    permissions:
      contents: read
    secrets: inherit
    with: 
      target-ref: ${{ inputs.target-ref }}
      artefact-ref: ${{ needs.set-tag.outputs.tag }}
      feature: ${{ inputs.feature }}
      solution: ${{ inputs.solution }}

  ### Pre-deployment tests on the package from build above



  # Tag the release
  tag-release:
    name: 🚀 Tag and Release
    needs: [set-tag, build]
    uses: ./.github/workflows/tag-release.yml
    permissions:
      contents: write
    secrets: inherit
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      target-ref: ${{ inputs.target-ref }}
      feature: ${{ inputs.feature }}

  # Deploy to GitHub Pages in Solution Repo (considered the CI environment)
  # Note: Uses artefacts created by build jobs above
  deploy-ci:
    name: Deploy CI
    needs: [set-tag, build, tag-release]
    uses: ./.github/workflows/deploy-static-site.yml
    permissions:
      contents: write
      pages: write
      id-token: write
    with:
      artefact-ref: ${{ needs.set-tag.outputs.tag }}
      deploy-to: ${{ inputs.deploy-to }}
    secrets: inherit

  ### Run CI Post-Deployment Tests here

  # Test for broken hyperlinks
  check-links:
    name: 🔗 Check Links
    needs: [deploy-ci]
    uses: ./.github/workflows/check-links.yml
    permissions:
      contents: read
    with: 
      site-url: ${{ inputs.site-url }}
      toggle: ${{ inputs.check-links }}

  # Dispatch to trigger deployment to Stage Environment
  dispatch-stg:
    name: Dispatch STG
    needs: [build, check-links]
    uses: ./.github/workflows/deployment-dispatch.yml
    permissions:
      contents: write
    with:
      blue-green: 'blue'
      target-repo: ${{ inputs.repo-stage }}
    secrets: inherit

  # Confirm CI Completed
  ci-complete:
    name: 👍 CI Complete
    needs: [set-tag, build, deploy-ci, dispatch-stg] 
    runs-on: ubuntu-latest
    permissions:
      contents: none
    steps:
      - name: Ready message
        run: echo "### Continuous Integration Completed :thumbsup:" >> $GITHUB_STEP_SUMMARY

  # Confirm CI Failed
  ci-failed:
    name: 👎 CI Failed 
    needs: [set-tag, build, deploy-ci, dispatch-stg]  
    if: always() && ( contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') )
    runs-on: ubuntu-latest 
    permissions:
      contents: none
    steps:
      - name: Ready message
        run: echo "### Continuous Integration Failed :thumbsdown:" >> $GITHUB_STEP_SUMMARY